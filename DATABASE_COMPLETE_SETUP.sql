-- ๐๏ธ ูุธุงู ุฅุฏุงุฑุฉ ุตุงูุฉ ุญุณุงู ุงูุฑูุงุถูุฉ - ุงูุณูุฑุจุช ุงููุงูู ูุฅูุดุงุก ุฌููุน ุงูุฌุฏุงูู
-- ูุฌุจ ุชูููุฐ ูุฐุง ุงูุณูุฑุจุช ูู Supabase SQL Editor

-- ================================================
-- 1๏ธโฃ ุฌุฏูู ุงููุดุชุฑููู (Subscribers)
-- ================================================
CREATE TABLE IF NOT EXISTS subscribers (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL,
    age INTEGER NOT NULL CHECK (age > 0 AND age < 150),
    weight DECIMAL(5,2) NOT NULL CHECK (weight > 0),
    height DECIMAL(5,2) NOT NULL CHECK (height > 0),
    phone TEXT NOT NULL,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================
-- 2๏ธโฃ ุฌุฏูู ุงููุฌููุนุงุช (Groups) - ููููุฑุณุงุช ูุงูุฃูุธูุฉ ุงูุบุฐุงุฆูุฉ
-- ================================================
CREATE TABLE IF NOT EXISTS groups (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    subscriber_id UUID NOT NULL REFERENCES subscribers(id) ON DELETE CASCADE,
    title TEXT,
    type TEXT NOT NULL CHECK (type IN ('course', 'diet')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================
-- 3๏ธโฃ ุฌุฏูู ุนูุงุตุฑ ุงููุฌููุนุงุช (Group Items)
-- ================================================
CREATE TABLE IF NOT EXISTS group_items (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    group_id UUID NOT NULL REFERENCES groups(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    order_index INTEGER DEFAULT 0
);

-- ================================================
-- 4๏ธโฃ ุฌุฏูู ููุชุจุฉ ุงูุชูุงุฑูู (Course Points)
-- ================================================
CREATE TABLE IF NOT EXISTS course_points (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================
-- 5๏ธโฃ ุฌุฏูู ููุชุจุฉ ุงูุนูุงุตุฑ ุงูุบุฐุงุฆูุฉ (Diet Items)
-- ================================================
CREATE TABLE IF NOT EXISTS diet_items (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================
-- 6๏ธโฃ ุฌุฏูู ุงูููุชุฌุงุช (Products) - ูููุฎุฒู
-- ================================================
CREATE TABLE IF NOT EXISTS products (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL CHECK (price >= 0),
    quantity INTEGER NOT NULL DEFAULT 0 CHECK (quantity >= 0),
    category TEXT,
    barcode TEXT UNIQUE,
    supplier TEXT,
    cost_price DECIMAL(10,2) CHECK (cost_price >= 0),
    min_stock_level INTEGER DEFAULT 5,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================
-- 7๏ธโฃ ุฌุฏูู ุงููุจูุนุงุช (Sales)
-- ================================================
CREATE TABLE IF NOT EXISTS sales (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE RESTRICT,
    buyer_name TEXT NOT NULL,
    buyer_phone TEXT,
    quantity_sold INTEGER NOT NULL CHECK (quantity_sold > 0),
    unit_price DECIMAL(10,2) NOT NULL CHECK (unit_price >= 0),
    total_price DECIMAL(10,2) NOT NULL CHECK (total_price >= 0),
    discount_amount DECIMAL(10,2) DEFAULT 0 CHECK (discount_amount >= 0),
    payment_method TEXT DEFAULT 'cash' CHECK (payment_method IN ('cash', 'card', 'transfer')),
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================
-- 8๏ธโฃ ุฌุฏูู ุชูุงุฑูุฑ ุงููุฎุฒู (Stock Movements) - ุงุฎุชูุงุฑู
-- ================================================
CREATE TABLE IF NOT EXISTS stock_movements (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    movement_type TEXT NOT NULL CHECK (movement_type IN ('in', 'out', 'adjustment')),
    quantity INTEGER NOT NULL,
    reference_id UUID, -- ูููู ุฃู ูููู ูุนุฑู ุงููุจูุนุฉ ุฃู ุงูุดุฑุงุก
    reference_type TEXT, -- sale, purchase, adjustment
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================
-- ๐ ุฅูุดุงุก ุงูููุงุฑุณ (Indexes) ูุชุญุณูู ุงูุฃุฏุงุก
-- ================================================

-- ููุงุฑุณ ุงููุดุชุฑููู
CREATE INDEX IF NOT EXISTS idx_subscribers_name ON subscribers(name);
CREATE INDEX IF NOT EXISTS idx_subscribers_phone ON subscribers(phone);
CREATE INDEX IF NOT EXISTS idx_subscribers_created_at ON subscribers(created_at);

-- ููุงุฑุณ ุงููุฌููุนุงุช
CREATE INDEX IF NOT EXISTS idx_groups_subscriber_id ON groups(subscriber_id);
CREATE INDEX IF NOT EXISTS idx_groups_type ON groups(type);
CREATE INDEX IF NOT EXISTS idx_groups_created_at ON groups(created_at);

-- ููุงุฑุณ ุนูุงุตุฑ ุงููุฌููุนุงุช
CREATE INDEX IF NOT EXISTS idx_group_items_group_id ON group_items(group_id);
CREATE INDEX IF NOT EXISTS idx_group_items_order ON group_items(order_index);

-- ููุงุฑุณ ุงูุชูุงุฑูู ูุงูุฃุทุนูุฉ
CREATE INDEX IF NOT EXISTS idx_course_points_name ON course_points(name);
CREATE INDEX IF NOT EXISTS idx_diet_items_name ON diet_items(name);

-- ููุงุฑุณ ุงูููุชุฌุงุช
CREATE INDEX IF NOT EXISTS idx_products_name ON products(name);
CREATE INDEX IF NOT EXISTS idx_products_category ON products(category);
CREATE INDEX IF NOT EXISTS idx_products_barcode ON products(barcode);
CREATE INDEX IF NOT EXISTS idx_products_quantity ON products(quantity);

-- ููุงุฑุณ ุงููุจูุนุงุช
CREATE INDEX IF NOT EXISTS idx_sales_product_id ON sales(product_id);
CREATE INDEX IF NOT EXISTS idx_sales_buyer_name ON sales(buyer_name);
CREATE INDEX IF NOT EXISTS idx_sales_created_at ON sales(created_at);
CREATE INDEX IF NOT EXISTS idx_sales_total_price ON sales(total_price);

-- ููุงุฑุณ ุญุฑูุงุช ุงููุฎุฒู
CREATE INDEX IF NOT EXISTS idx_stock_movements_product_id ON stock_movements(product_id);
CREATE INDEX IF NOT EXISTS idx_stock_movements_type ON stock_movements(movement_type);
CREATE INDEX IF NOT EXISTS idx_stock_movements_created_at ON stock_movements(created_at);

-- ================================================
-- ๐ก๏ธ ุฅูุดุงุก Functions ูููุฏุฉ
-- ================================================

-- Function ูุญุณุงุจ ุฅุฌูุงูู ูููุฉ ุงููุฎุฒู
CREATE OR REPLACE FUNCTION calculate_total_inventory_value()
RETURNS DECIMAL AS $$
BEGIN
    RETURN (
        SELECT COALESCE(SUM(quantity * price), 0)
        FROM products
        WHERE quantity > 0
    );
END;
$$ LANGUAGE plpgsql;

-- Function ูุญุณุงุจ ุงูุฃุฑุจุงุญ ุงูููููุฉ
CREATE OR REPLACE FUNCTION calculate_daily_profit(target_date DATE DEFAULT CURRENT_DATE)
RETURNS DECIMAL AS $$
BEGIN
    RETURN (
        SELECT COALESCE(SUM(
            (s.unit_price - COALESCE(p.cost_price, 0)) * s.quantity_sold
        ), 0)
        FROM sales s
        JOIN products p ON s.product_id = p.id
        WHERE DATE(s.created_at) = target_date
    );
END;
$$ LANGUAGE plpgsql;

-- Function ูุชุญุฏูุซ ุงููุฎุฒู ุนูุฏ ุงูุจูุน
CREATE OR REPLACE FUNCTION update_stock_on_sale()
RETURNS TRIGGER AS $$
BEGIN
    -- ุชูููู ุงููููุฉ ูู ุงูููุชุฌ
    UPDATE products
    SET quantity = quantity - NEW.quantity_sold,
        updated_at = NOW()
    WHERE id = NEW.product_id;

    -- ุฅุถุงูุฉ ุญุฑูุฉ ูุฎุฒู
    INSERT INTO stock_movements (
        product_id, movement_type, quantity, reference_id, reference_type, notes
    ) VALUES (
        NEW.product_id, 'out', NEW.quantity_sold, NEW.id, 'sale',
        'ุจูุน ููุนููู: ' || NEW.buyer_name
    );

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ุฅูุดุงุก Trigger ูุชุญุฏูุซ ุงููุฎุฒู ุชููุงุฆูุงู ุนูุฏ ุงูุจูุน
DROP TRIGGER IF EXISTS trigger_update_stock_on_sale ON sales;
CREATE TRIGGER trigger_update_stock_on_sale
    AFTER INSERT ON sales
    FOR EACH ROW
    EXECUTE FUNCTION update_stock_on_sale();

-- ================================================
-- ๐ ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุฃูููุฉ
-- ================================================

-- ุฅุฏุฑุงุฌ ุงูุชูุงุฑูู ุงูุฃุณุงุณูุฉ
INSERT INTO course_points (name, description)
SELECT * FROM (VALUES
    ('ุจูุด ุจุฑุณ', 'ุชูุฑูู ุฃุณุงุณู ูุนุถูุงุช ุงูุตุฏุฑ'),
    ('ุณููุงุช', 'ุชูุฑูู ุดุงูู ูุนุถูุงุช ุงูุฃุฑุฌู ูุงููุคุฎุฑุฉ'),
    ('ุฏูุฏ ูููุช', 'ุชูุฑูู ููู ูุนุถูุงุช ุงูุธูุฑ ูุงูุฃุฑุฌู'),
    ('ุดุฏ ุนููู', 'ุชูุฑูู ูุนุถูุงุช ุงูุธูุฑ ูุงูุนุถูุฉ ุฐุงุช ุงูุฑุฃุณูู'),
    ('ุถุบุท ูุชู', 'ุชูุฑูู ูุชูููุฉ ุนุถูุงุช ุงููุชู'),
    ('ุถุบุท ูุฑูุณู', 'ุชูุฑูู ูุฎุตุต ููุนุถูุฉ ุซูุงุซูุฉ ุงูุฑุคูุณ'),
    ('ูุงุฑุฏูู', 'ุชูุงุฑูู ุงูููุจ ูุงูุฃูุนูุฉ ุงูุฏูููุฉ'),
    ('ุชูุงุฑูู ุงูุจุทู', 'ุชูุงุฑูู ูุชูููุฉ ุนุถูุงุช ุงูุจุทู ุงูุฃุณุงุณูุฉ'),
    ('ุจุงู ุณุจุณ', 'ุชูุฑูู ููุนุถูุฉ ุฐุงุช ุงูุฑุฃุณูู'),
    ('ุชุฑุงู ุณุจุณ', 'ุชูุฑูู ููุนุถูุฉ ุซูุงุซูุฉ ุงูุฑุคูุณ'),
    ('ุฑูุฑูุฉ ุฌุงูุจูุฉ', 'ุชูุฑูู ูุนุถูุงุช ุงููุชู ุงูุฌุงูุจูุฉ'),
    ('ุณุญุจ ุฃุฑุถู', 'ุชูุฑูู ูุนุถูุงุช ุงูุธูุฑ ุงูุณูููุฉ'),
    ('ูููุฌุฒ', 'ุชูุฑูู ููุฃุฑุฌู ูุงูุชูุงุฒู'),
    ('ุจูุงูู', 'ุชูุฑูู ุซุจุงุช ูุนุถูุงุช ุงูุฌุฐุน'),
    ('ุจูุฑุจู', 'ุชูุฑูู ุดุงูู ููุฌุณู')
) AS v(name, description)
WHERE NOT EXISTS (
    SELECT 1 FROM course_points WHERE course_points.name = v.name
);

-- ุฅุฏุฑุงุฌ ุงูุนูุงุตุฑ ุงูุบุฐุงุฆูุฉ ุงูุฃุณุงุณูุฉ
INSERT INTO diet_items (name, description)
SELECT * FROM (VALUES
    ('ุจูุถ ูุณููู', 'ูุตุฏุฑ ููุชุงุฒ ููุจุฑูุชูู ุนุงูู ุงูุฌูุฏุฉ'),
    ('ุดููุงู', 'ูุฑุจูููุฏุฑุงุช ูุนูุฏุฉ ูุฃููุงู ูููุฏุฉ'),
    ('ุฏุฌุงุฌ ูุดูู', 'ุจุฑูุชูู ุฎุงูู ูู ุงูุฏููู'),
    ('ุฃุฑุฒ ุจูู', 'ูุฑุจูููุฏุฑุงุช ุตุญูุฉ ูุน ุฃููุงู'),
    ('ุฎุถุฑูุงุช ูุฑููุฉ', 'ูุตุฏุฑ ุงูููุชุงูููุงุช ูุงููุนุงุฏู'),
    ('ุชูุฑ', 'ุณูุฑูุงุช ุทุจูุนูุฉ ุณุฑู๏ฟฝ๏ฟฝุฉ ุงูุงูุชุตุงุต'),
    ('ููุฒ', 'ุฏููู ุตุญูุฉ ูุจุฑูุชูู ูุจุงุชู'),
    ('ุณูู ุงูุณูููู', 'ุฃูููุบุง 3 ูุจุฑูุชูู ุนุงูู ุงูุฌูุฏุฉ'),
    ('ุญููุจ ุฎุงูู ุงูุฏุณู', 'ูุงูุณููู ูุจุฑูุชูู'),
    ('ููุงูู ููุณููุฉ', 'ููุชุงูููุงุช ุทุจูุนูุฉ ูุฃููุงู'),
    ('ุฒูุช ุงูุฒูุชูู', 'ุฏููู ุฃุญุงุฏูุฉ ุบูุฑ ูุดุจุนุฉ'),
    ('ููููุง', 'ุจุฑูุชูู ูุจุงุชู ูุงูู'),
    ('ุฃูููุงุฏู', 'ุฏููู ุตุญูุฉ ูุฃููุงู'),
    ('ุฒุจุงุฏู ูููุงูู', 'ุจุฑูุชูู ูุจุฑูุจููุชูู'),
    ('ุจุฐูุฑ ุงูุดูุง', 'ุฃูููุบุง 3 ูุฃููุงู')
) AS v(name, description)
WHERE NOT EXISTS (
    SELECT 1 FROM diet_items WHERE diet_items.name = v.name
);

-- ุฅุฏุฑุงุฌ ููุชุฌุงุช ุฃุณุงุณูุฉ ูููุฎุฒู
INSERT INTO products (name, description, price, quantity, category, cost_price, min_stock_level)
SELECT * FROM (VALUES
    ('ูุงู ุจุฑูุชูู - ูุงูููุง', 'ูููู ุจุฑูุชูู ุณุฑูุน ุงูุงูุชุตุงุต', 150.00, 50, 'ููููุงุช ุบุฐุงุฆูุฉ', 120.00, 10),
    ('ูุงู ุจุฑูุชูู - ุดููููุงุชุฉ', 'ูููู ุจุฑูุชูู ุจุทุนู ุงูุดููููุงุชุฉ', 150.00, 45, 'ููููุงุช ุบุฐุงุฆูุฉ', 120.00, 10),
    ('ูุฑูุงุชูู ููููููุฏุฑุงุช', 'ูููู ูุฒูุงุฏุฉ ุงูููุฉ ูุงูุทุงูุฉ', 80.00, 30, 'ููููุงุช ุบุฐุงุฆูุฉ', 60.00, 5),
    ('ููุชุงูููุงุช ูุชุนุฏุฏุฉ', 'ูููู ููุชุงูููุงุช ุดุงูู', 45.00, 100, 'ููุชุงูููุงุช', 30.00, 20),
    ('ุฃูููุบุง 3', 'ูููู ุฃุญูุงุถ ุฏูููุฉ ุฃุณุงุณูุฉ', 65.00, 25, 'ููููุงุช ุบุฐุงุฆูุฉ', 45.00, 10),
    ('ูุดุฑูุจ ุทุงูุฉ', 'ูุดุฑูุจ ุทุงูุฉ ุทุจูุนู', 8.00, 200, 'ูุดุฑูุจุงุช', 5.00, 50),
    ('ูุงุก ุตุญู', 'ููุงู ูุนุฏููุฉ ุทุจูุนูุฉ', 2.50, 500, 'ูุดุฑูุจุงุช', 1.50, 100),
    ('ุจุงุฑ ุจุฑูุชูู', 'ูุฌุจุฉ ุฎูููุฉ ุบููุฉ ุจุงูุจุฑูุชูู', 12.00, 150, 'ูุฌุจุงุช ุฎูููุฉ', 8.00, 30),
    ('ููุงุฒุงุช ุฑูุงุถูุฉ', 'ููุงุฒุงุช ุชุฏุฑูุจ ุนุงููุฉ ุงูุฌูุฏุฉ', 35.00, 20, 'ูุนุฏุงุช ุฑูุงุถูุฉ', 25.00, 5),
    ('ุญุฒุงู ุฑูุน ุฃุซูุงู', 'ุญุฒุงู ุฏุนู ููุธูุฑ', 120.00, 15, 'ูุนุฏุงุช ุฑูุงุถูุฉ', 80.00, 3)
) AS v(name, description, price, quantity, category, cost_price, min_stock_level)
WHERE NOT EXISTS (
    SELECT 1 FROM products WHERE products.name = v.name
);

-- ================================================
-- ๏ฟฝ๏ฟฝ๏ฟฝ๏ฟฝ ุฅุนุฏุงุฏุงุช ุงูุฃูุงู (ุงุฎุชูุงุฑู)
-- ================================================

-- ุชุนุทูู Row Level Security ูุคูุชุงู ููุจุณุงุทุฉ
ALTER TABLE subscribers DISABLE ROW LEVEL SECURITY;
ALTER TABLE groups DISABLE ROW LEVEL SECURITY;
ALTER TABLE group_items DISABLE ROW LEVEL SECURITY;
ALTER TABLE course_points DISABLE ROW LEVEL SECURITY;
ALTER TABLE diet_items DISABLE ROW LEVEL SECURITY;
ALTER TABLE products DISABLE ROW LEVEL SECURITY;
ALTER TABLE sales DISABLE ROW LEVEL SECURITY;
ALTER TABLE stock_movements DISABLE ROW LEVEL SECURITY;

-- ููุงุญุธุฉ: ููููู ุชูุนูู RLS ูุงุญูุงู ูุฅูุดุงุก policies ุญุณุจ ุงุญุชูุงุฌุงุชู

-- ================================================
-- โ ุงูุชูู ุฅูุดุงุก ุฌููุน ุงูุฌุฏุงูู ูุงูุจูุงูุงุช ุงูุฃูููุฉ
-- ================================================

-- ููุชุญูู ูู ูุฌุงุญ ุงูุนูููุฉุ ุดุบู ูุฐู ุงูุงุณุชุนูุงูุงุช:
-- SELECT 'subscribers' as table_name, count(*) as count FROM subscribers
-- UNION ALL
-- SELECT 'course_points', count(*) FROM course_points
-- UNION ALL
-- SELECT 'diet_items', count(*) FROM diet_items
-- UNION ALL
-- SELECT 'products', count(*) FROM products;
